{
  "openapi": "3.0.1",
  "info": {
    "title": "FlexPrice API",
    "description": "FlexPrice API Service",
    "contact": {},
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.cloud.flexprice.io/v1"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Login a user",
        "requestBody": {
          "description": "Login request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "login"
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign up",
        "description": "Sign up a new user",
        "requestBody": {
          "description": "Sign up request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.SignUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "signup"
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customers",
        "description": "Get customers",
        "parameters": [
          {
            "name": "customer_ids",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListCustomersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer",
        "description": "Create a customer",
        "requestBody": {
          "description": "Customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateCustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "customer"
      }
    },
    "/customers/lookup/{lookup_key}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get a customer by lookup key",
        "description": "Get a customer by lookup key (external_id)",
        "parameters": [
          {
            "name": "lookup_key",
            "in": "path",
            "description": "Customer Lookup Key (external_id)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/customers/{id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get a customer",
        "description": "Get a customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update a customer",
        "description": "Update a customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdateCustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "customer"
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete a customer",
        "description": "Delete a customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/customers/{id}/invoices/summary": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get a customer invoice summary",
        "description": "Get a customer invoice summary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.CustomerMultiCurrencyInvoiceSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/customers/{id}/wallets": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get wallets by customer ID",
        "description": "Get all wallets for a customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dto.WalletResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/entitlements": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Get entitlements",
        "description": "Get entitlements with the specified filter",
        "parameters": [
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature_ids",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "feature_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "metered",
                "boolean",
                "static"
              ],
              "x-enum-varnames": [
                "FeatureTypeMetered",
                "FeatureTypeBoolean",
                "FeatureTypeStatic"
              ]
            },
            "x-enum-varnames": [
              "FeatureTypeMetered",
              "FeatureTypeBoolean",
              "FeatureTypeStatic"
            ]
          },
          {
            "name": "is_enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "plan_ids",
            "in": "query",
            "description": "Specific filters for entitlements",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListEntitlementsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Create a new entitlement",
        "description": "Create a new entitlement with the specified configuration",
        "requestBody": {
          "description": "Entitlement configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateEntitlementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.EntitlementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "entitlement"
      }
    },
    "/entitlements/{id}": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Get an entitlement by ID",
        "description": "Get an entitlement by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Entitlement ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.EntitlementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Update an entitlement",
        "description": "Update an entitlement with the specified configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Entitlement ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Entitlement configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdateEntitlementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.EntitlementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "entitlement"
      },
      "delete": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Delete an entitlement",
        "description": "Delete an entitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Entitlement ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get environments",
        "description": "Get environments",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListEnvironmentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create an environment",
        "description": "Create an environment",
        "requestBody": {
          "description": "Environment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateEnvironmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.EnvironmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "environment"
      }
    },
    "/environments/{id}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get an environment",
        "description": "Get an environment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.EnvironmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Update an environment",
        "description": "Update an environment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Environment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdateEnvironmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.EnvironmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "environment"
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get raw events",
        "description": "Retrieve raw events with pagination and filtering",
        "parameters": [
          {
            "name": "external_customer_id",
            "in": "query",
            "description": "External Customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_name",
            "in": "query",
            "description": "Event Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Start Time (RFC3339)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "End Time (RFC3339)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iter_first_key",
            "in": "query",
            "description": "Iter First Key (unix_timestamp_nanoseconds::event_id)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iter_last_key",
            "in": "query",
            "description": "Iter Last Key (unix_timestamp_nanoseconds::event_id)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page Size (1-50)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.GetEventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Ingest event",
        "description": "Ingest a new event into the system",
        "requestBody": {
          "description": "Event data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.IngestEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "message:Event accepted for processing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "event"
      }
    },
    "/events/usage": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Get usage statistics",
        "description": "Retrieve aggregated usage statistics for events",
        "requestBody": {
          "description": "Request body",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/dto.GetUsageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.GetUsageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/events/usage/meter": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Get usage by meter",
        "description": "Retrieve aggregated usage statistics using meter configuration",
        "requestBody": {
          "description": "Request body",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/dto.GetUsageByMeterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.GetUsageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/features": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Get features",
        "description": "Get features with the specified filter",
        "parameters": [
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature_ids",
            "in": "query",
            "description": "Feature specific filters",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "lookup_key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListFeaturesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Features"
        ],
        "summary": "Create a new feature",
        "description": "Create a new feature with the specified configuration",
        "requestBody": {
          "description": "Feature configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateFeatureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.FeatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "feature"
      }
    },
    "/features/{id}": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Get a feature by ID",
        "description": "Get a feature by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.FeatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Features"
        ],
        "summary": "Update a feature",
        "description": "Update a feature with the specified configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Feature configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdateFeatureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.FeatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "feature"
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "summary": "Delete a feature",
        "description": "Delete a feature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "List invoices",
        "description": "List invoices with optional filtering",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_status",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "DRAFT",
                  "FINALIZED",
                  "VOIDED"
                ]
              }
            }
          },
          {
            "name": "invoice_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "SUBSCRIPTION",
                "ONE_OFF",
                "CREDIT"
              ],
              "x-enum-varnames": [
                "InvoiceTypeSubscription",
                "InvoiceTypeOneOff",
                "InvoiceTypeCredit"
              ]
            },
            "x-enum-varnames": [
              "InvoiceTypeSubscription",
              "InvoiceTypeOneOff",
              "InvoiceTypeCredit"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "payment_status",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "PROCESSING",
                  "SUCCEEDED",
                  "FAILED",
                  "REFUNDED",
                  "PARTIALLY_REFUNDED"
                ]
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          },
          {
            "name": "subscription_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListInvoicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create a new invoice",
        "description": "Create a new invoice with the provided details",
        "requestBody": {
          "description": "Invoice details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateInvoiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "invoice"
      }
    },
    "/invoices/preview": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get a preview invoice",
        "description": "Get a preview invoice",
        "requestBody": {
          "description": "Preview Invoice Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.GetPreviewInvoiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/invoices/{id}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get an invoice by ID",
        "description": "Get detailed information about an invoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.InvoiceResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{id}/finalize": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Finalize an invoice",
        "description": "Finalize a draft invoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{id}/payment": {
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Update invoice payment status",
        "description": "Update the payment status of an invoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payment Status Update Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdatePaymentStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/invoices/{id}/void": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Void an invoice",
        "description": "Void an invoice that hasn't been paid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/meters": {
      "get": {
        "tags": [
          "Meters"
        ],
        "summary": "List meters",
        "description": "Get all meters",
        "parameters": [
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "meter_ids",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dto.MeterResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Meters"
        ],
        "summary": "Create meter",
        "description": "Create a new meter with the specified configuration",
        "requestBody": {
          "description": "Meter configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateMeterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.MeterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "meter"
      }
    },
    "/meters/{id}": {
      "get": {
        "tags": [
          "Meters"
        ],
        "summary": "Get meter",
        "description": "Get a specific meter by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Meter ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.MeterResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Meters"
        ],
        "summary": "Update meter",
        "description": "Update an existing meter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Meter ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Meter configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdateMeterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.MeterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "meter"
      },
      "delete": {
        "tags": [
          "Meters"
        ],
        "summary": "Delete meter",
        "description": "Delete an existing meter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Meter ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "message:Meter deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/meters/{id}/disable": {
      "post": {
        "tags": [
          "Meters"
        ],
        "summary": "Disable meter [TODO: Deprecate]",
        "description": "Disable an existing meter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Meter ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "message:Meter disabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "List payments",
        "description": "List payments with the specified filter",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "payment_gateway",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_ids",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "payment_method_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListPaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create a new payment",
        "description": "Create a new payment with the specified configuration",
        "requestBody": {
          "description": "Payment configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreatePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "payment"
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get a payment by ID",
        "description": "Get a payment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Update a payment",
        "description": "Update a payment with the specified configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payment configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdatePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "payment"
      },
      "delete": {
        "tags": [
          "Payments"
        ],
        "summary": "Delete a payment",
        "description": "Delete a payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/payments/{id}/process": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Process a payment",
        "description": "Process a payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/plans": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Get plans",
        "description": "Get plans with the specified filter",
        "parameters": [
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "plan_ids",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListPlansResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Plans"
        ],
        "summary": "Create a new plan",
        "description": "Create a new plan with the specified configuration",
        "requestBody": {
          "description": "Plan configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreatePlanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PlanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "plan"
      }
    },
    "/plans/{id}": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Get a plan by ID",
        "description": "Get a plan by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PlanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Plans"
        ],
        "summary": "Update a plan by ID",
        "description": "Update a plan by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Plan configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdatePlanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PlanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "plan"
      },
      "delete": {
        "tags": [
          "Plans"
        ],
        "summary": "Delete a plan by ID",
        "description": "Delete a plan by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/plans/{id}/entitlements": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Get plan entitlements",
        "description": "Get all entitlements for a plan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PlanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/prices": {
      "get": {
        "tags": [
          "Prices"
        ],
        "summary": "Get prices",
        "description": "Get prices with the specified filter",
        "parameters": [
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "plan_ids",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "price_ids",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListPricesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Prices"
        ],
        "summary": "Create a new price",
        "description": "Create a new price with the specified configuration",
        "requestBody": {
          "description": "Price configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreatePriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "price"
      }
    },
    "/prices/{id}": {
      "get": {
        "tags": [
          "Prices"
        ],
        "summary": "Get a price by ID",
        "description": "Get a price by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Price ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Prices"
        ],
        "summary": "Update a price",
        "description": "Update a price with the specified configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Price ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Price configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdatePriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.PriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "price"
      },
      "delete": {
        "tags": [
          "Prices"
        ],
        "summary": "Delete a price",
        "description": "Delete a price",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Price ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "List subscriptions",
        "description": "Get subscriptions with optional filtering",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_status",
            "in": "query",
            "description": "Filter by subscription status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit for pagination",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListSubscriptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create subscription",
        "description": "Create a new subscription",
        "requestBody": {
          "description": "Subscription Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "subscription"
      }
    },
    "/subscriptions/usage": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get usage by subscription",
        "description": "Get usage by subscription",
        "requestBody": {
          "description": "Request",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/dto.GetUsageBySubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.GetUsageBySubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get subscription",
        "description": "Get a subscription by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/subscriptions/{id}/cancel": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancel subscription",
        "description": "Cancel a subscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cancel_at_period_end",
            "in": "query",
            "description": "Cancel at period end",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "List tasks",
        "description": "List tasks with optional filtering",
        "parameters": [
          {
            "name": "created_by",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "EVENTS",
                "PRICES"
              ],
              "x-enum-varnames": [
                "EntityTypeEvents",
                "EntityTypePrices"
              ]
            },
            "x-enum-varnames": [
              "EntityTypeEvents",
              "EntityTypePrices"
            ]
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          },
          {
            "name": "task_status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED"
              ],
              "x-enum-varnames": [
                "TaskStatusPending",
                "TaskStatusProcessing",
                "TaskStatusCompleted",
                "TaskStatusFailed"
              ]
            },
            "x-enum-varnames": [
              "TaskStatusPending",
              "TaskStatusProcessing",
              "TaskStatusCompleted",
              "TaskStatusFailed"
            ]
          },
          {
            "name": "task_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "IMPORT",
                "EXPORT"
              ],
              "x-enum-varnames": [
                "TaskTypeImport",
                "TaskTypeExport"
              ]
            },
            "x-enum-varnames": [
              "TaskTypeImport",
              "TaskTypeExport"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a new task",
        "description": "Create a new import/export task",
        "requestBody": {
          "description": "Task details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "task"
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task by ID",
        "description": "Get detailed information about a task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}/process": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Process a task",
        "description": "Start processing a task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gin.H"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}/status": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update task status",
        "description": "Update the status of a task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdateTaskStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "status"
      }
    },
    "/tenants": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create a new tenant",
        "description": "Create a new tenant",
        "requestBody": {
          "description": "Create tenant request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateTenantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.TenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/tenants/{id}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get tenant by ID",
        "description": "Get tenant by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.TenantResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user info",
        "description": "Get the current user's information",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.UserResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/wallets": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Create a new wallet",
        "description": "Create a new wallet for a customer",
        "requestBody": {
          "description": "Create wallet request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.CreateWalletRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.WalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/wallets/{id}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get wallet by ID",
        "description": "Get a wallet by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Wallet ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.WalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "wallets"
        ],
        "summary": "Update a wallet",
        "description": "Update a wallet's details including auto top-up configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Wallet ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update wallet request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.UpdateWalletRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.WalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/wallets/{id}/balance/real-time": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get wallet balance",
        "description": "Get real-time balance of a wallet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Wallet ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.WalletBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/wallets/{id}/terminate": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Terminate a wallet",
        "description": "Terminates a wallet by closing it and debiting remaining balance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Wallet ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.WalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wallets/{id}/top-up": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Top up wallet",
        "description": "Add credits to a wallet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Wallet ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Top up request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.TopUpWalletRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.WalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/wallets/{id}/transactions": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get wallet transactions",
        "description": "Get transactions for a wallet with pagination",
        "parameters": [
          {
            "name": "amount_used_less_than",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry_date_after",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry_date_before",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "reference_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "deleted",
                "archived"
              ],
              "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
              ]
            },
            "x-enum-varnames": [
              "StatusPublished",
              "StatusDeleted",
              "StatusArchived"
            ]
          },
          {
            "name": "transaction_reason",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "INVOICE_PAYMENT",
                "FREE_CREDIT_GRANT",
                "SUBSCRIPTION_CREDIT_GRANT",
                "PURCHASED_CREDIT_INVOICED",
                "PURCHASED_CREDIT_DIRECT",
                "INVOICE_REFUND",
                "CREDIT_EXPIRED"
              ],
              "x-enum-varnames": [
                "TransactionReasonInvoicePayment",
                "TransactionReasonFreeCredit",
                "TransactionReasonSubscriptionCredit",
                "TransactionReasonPurchasedCreditInvoiced",
                "TransactionReasonPurchasedCreditDirect",
                "TransactionReasonInvoiceRefund",
                "TransactionReasonCreditExpired"
              ]
            },
            "x-enum-varnames": [
              "TransactionReasonInvoicePayment",
              "TransactionReasonFreeCredit",
              "TransactionReasonSubscriptionCredit",
              "TransactionReasonPurchasedCreditInvoiced",
              "TransactionReasonPurchasedCreditDirect",
              "TransactionReasonInvoiceRefund",
              "TransactionReasonCreditExpired"
            ]
          },
          {
            "name": "transaction_status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "completed",
                "failed"
              ],
              "x-enum-varnames": [
                "TransactionStatusPending",
                "TransactionStatusCompleted",
                "TransactionStatusFailed"
              ]
            },
            "x-enum-varnames": [
              "TransactionStatusPending",
              "TransactionStatusCompleted",
              "TransactionStatusFailed"
            ]
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "credit",
                "debit"
              ],
              "x-enum-varnames": [
                "TransactionTypeCredit",
                "TransactionTypeDebit"
              ]
            },
            "x-enum-varnames": [
              "TransactionTypeCredit",
              "TransactionTypeDebit"
            ]
          },
          {
            "name": "wallet_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.ListWalletTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "dto.AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "dto.CreateCustomerRequest": {
        "required": [
          "external_id"
        ],
        "type": "object",
        "properties": {
          "address_city": {
            "maxLength": 100,
            "type": "string"
          },
          "address_country": {
            "type": "string"
          },
          "address_line1": {
            "maxLength": 255,
            "type": "string"
          },
          "address_line2": {
            "maxLength": 255,
            "type": "string"
          },
          "address_postal_code": {
            "maxLength": 20,
            "type": "string"
          },
          "address_state": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "dto.CreateEntitlementRequest": {
        "required": [
          "feature_id",
          "feature_type"
        ],
        "type": "object",
        "properties": {
          "feature_id": {
            "type": "string"
          },
          "feature_type": {
            "$ref": "#/components/schemas/types.FeatureType"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "is_soft_limit": {
            "type": "boolean"
          },
          "plan_id": {
            "type": "string"
          },
          "static_value": {
            "type": "string"
          },
          "usage_limit": {
            "type": "integer"
          },
          "usage_reset_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          }
        }
      },
      "dto.CreateEnvironmentRequest": {
        "required": [
          "name",
          "slug",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "dto.CreateFeatureRequest": {
        "required": [
          "lookup_key",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "lookup_key": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "meter_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/types.FeatureType"
          },
          "unit_plural": {
            "type": "string"
          },
          "unit_singular": {
            "type": "string"
          }
        }
      },
      "dto.CreateInvoiceLineItemRequest": {
        "required": [
          "amount",
          "price_id",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "display_name": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "meter_display_name": {
            "type": "string"
          },
          "meter_id": {
            "type": "string"
          },
          "period_end": {
            "type": "string"
          },
          "period_start": {
            "type": "string"
          },
          "plan_display_name": {
            "type": "string"
          },
          "plan_id": {
            "type": "string"
          },
          "price_id": {
            "type": "string"
          },
          "price_type": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        }
      },
      "dto.CreateInvoiceRequest": {
        "required": [
          "amount_due",
          "currency",
          "customer_id",
          "invoice_type"
        ],
        "type": "object",
        "properties": {
          "amount_due": {
            "type": "number"
          },
          "amount_paid": {
            "type": "number"
          },
          "billing_period": {
            "type": "string"
          },
          "billing_reason": {
            "$ref": "#/components/schemas/types.InvoiceBillingReason"
          },
          "currency": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "invoice_status": {
            "$ref": "#/components/schemas/types.InvoiceStatus"
          },
          "invoice_type": {
            "$ref": "#/components/schemas/types.InvoiceType"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CreateInvoiceLineItemRequest"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "payment_status": {
            "$ref": "#/components/schemas/types.PaymentStatus"
          },
          "period_end": {
            "type": "string"
          },
          "period_start": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          }
        }
      },
      "dto.CreateMeterRequest": {
        "required": [
          "aggregation",
          "event_name",
          "name"
        ],
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/meter.Aggregation"
          },
          "event_name": {
            "type": "string",
            "example": "api_request"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/meter.Filter"
            }
          },
          "name": {
            "type": "string",
            "example": "API Usage Meter"
          },
          "reset_usage": {
            "type": "object",
            "example": "BILLING_PERIOD",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.ResetUsage"
              }
            ]
          }
        }
      },
      "dto.CreatePaymentRequest": {
        "required": [
          "amount",
          "currency",
          "destination_id",
          "destination_type",
          "payment_method_type"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "destination_id": {
            "type": "string"
          },
          "destination_type": {
            "$ref": "#/components/schemas/types.PaymentDestinationType"
          },
          "idempotency_key": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "payment_method_id": {
            "type": "string"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/types.PaymentMethodType"
          },
          "process_payment": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "dto.CreatePlanEntitlementRequest": {
        "required": [
          "feature_id",
          "feature_type"
        ],
        "type": "object",
        "properties": {
          "feature_id": {
            "type": "string"
          },
          "feature_type": {
            "$ref": "#/components/schemas/types.FeatureType"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "is_soft_limit": {
            "type": "boolean"
          },
          "plan_id": {
            "type": "string"
          },
          "static_value": {
            "type": "string"
          },
          "usage_limit": {
            "type": "integer"
          },
          "usage_reset_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          }
        }
      },
      "dto.CreatePlanPriceRequest": {
        "required": [
          "billing_cadence",
          "billing_model",
          "billing_period",
          "billing_period_count",
          "currency",
          "type"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "billing_cadence": {
            "$ref": "#/components/schemas/types.BillingCadence"
          },
          "billing_model": {
            "$ref": "#/components/schemas/types.BillingModel"
          },
          "billing_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          },
          "billing_period_count": {
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "filter_values": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "lookup_key": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "meter_id": {
            "type": "string"
          },
          "plan_id": {
            "type": "string"
          },
          "tier_mode": {
            "$ref": "#/components/schemas/types.BillingTier"
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CreatePriceTier"
            }
          },
          "transform_quantity": {
            "$ref": "#/components/schemas/price.TransformQuantity"
          },
          "type": {
            "$ref": "#/components/schemas/types.PriceType"
          }
        }
      },
      "dto.CreatePlanRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CreatePlanEntitlementRequest"
            }
          },
          "invoice_cadence": {
            "$ref": "#/components/schemas/types.InvoiceCadence"
          },
          "lookup_key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CreatePlanPriceRequest"
            }
          },
          "trial_period": {
            "type": "integer"
          },
          "plan_type": {
            "$ref": "#/components/schemas/types.PlanType"
          }
        }
      },
      "dto.CreatePriceRequest": {
        "required": [
          "billing_cadence",
          "billing_model",
          "billing_period",
          "billing_period_count",
          "currency",
          "type"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "billing_cadence": {
            "$ref": "#/components/schemas/types.BillingCadence"
          },
          "billing_model": {
            "$ref": "#/components/schemas/types.BillingModel"
          },
          "billing_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          },
          "billing_period_count": {
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "filter_values": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "lookup_key": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "meter_id": {
            "type": "string"
          },
          "plan_id": {
            "type": "string"
          },
          "tier_mode": {
            "$ref": "#/components/schemas/types.BillingTier"
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CreatePriceTier"
            }
          },
          "transform_quantity": {
            "$ref": "#/components/schemas/price.TransformQuantity"
          },
          "type": {
            "$ref": "#/components/schemas/types.PriceType"
          }
        }
      },
      "dto.CreatePriceTier": {
        "required": [
          "unit_amount"
        ],
        "type": "object",
        "properties": {
          "flat_amount": {
            "type": "string"
          },
          "unit_amount": {
            "type": "string"
          },
          "up_to": {
            "type": "integer"
          }
        }
      },
      "dto.CreateSubscriptionRequest": {
        "required": [
          "billing_cadence",
          "billing_period",
          "billing_period_count",
          "currency",
          "customer_id",
          "invoice_cadence",
          "plan_id",
          "start_date"
        ],
        "type": "object",
        "properties": {
          "billing_cadence": {
            "$ref": "#/components/schemas/types.BillingCadence"
          },
          "billing_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          },
          "billing_period_count": {
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "invoice_cadence": {
            "$ref": "#/components/schemas/types.InvoiceCadence"
          },
          "lookup_key": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "plan_id": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "trial_end": {
            "type": "string"
          },
          "trial_start": {
            "type": "string"
          }
        }
      },
      "dto.CreateTaskRequest": {
        "required": [
          "entity_type",
          "file_type",
          "file_url",
          "task_type"
        ],
        "type": "object",
        "properties": {
          "entity_type": {
            "$ref": "#/components/schemas/types.EntityType"
          },
          "file_name": {
            "type": "string"
          },
          "file_type": {
            "$ref": "#/components/schemas/types.FileType"
          },
          "file_url": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "task_type": {
            "$ref": "#/components/schemas/types.TaskType"
          }
        }
      },
      "dto.CreateTenantRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "dto.CreateWalletRequest": {
        "required": [
          "currency",
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "auto_topup_amount": {
            "type": "number"
          },
          "auto_topup_min_balance": {
            "type": "number"
          },
          "auto_topup_trigger": {
            "$ref": "#/components/schemas/types.AutoTopupTrigger"
          },
          "config": {
            "$ref": "#/components/schemas/types.WalletConfig"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "name": {
            "type": "string"
          },
          "wallet_type": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.WalletType"
              }
            ]
          }
        }
      },
      "dto.CustomerInvoiceSummary": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "overdue_invoice_count": {
            "type": "integer"
          },
          "total_invoice_count": {
            "type": "integer"
          },
          "total_overdue_amount": {
            "type": "number"
          },
          "total_revenue_amount": {
            "type": "number"
          },
          "total_unpaid_amount": {
            "type": "number"
          },
          "unpaid_fixed_charges": {
            "type": "number"
          },
          "unpaid_invoice_count": {
            "type": "integer"
          },
          "unpaid_usage_charges": {
            "type": "number"
          }
        }
      },
      "dto.CustomerMultiCurrencyInvoiceSummary": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string"
          },
          "default_currency": {
            "type": "string"
          },
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CustomerInvoiceSummary"
            }
          }
        }
      },
      "dto.CustomerResponse": {
        "type": "object",
        "properties": {
          "address_city": {
            "type": "string",
            "description": "AddressCity is the city of the customer's address"
          },
          "address_country": {
            "type": "string",
            "description": "AddressCountry is the country of the customer's address (ISO 3166-1 alpha-2)"
          },
          "address_line1": {
            "type": "string",
            "description": "AddressLine1 is the first line of the customer's address"
          },
          "address_line2": {
            "type": "string",
            "description": "AddressLine2 is the second line of the customer's address"
          },
          "address_postal_code": {
            "type": "string",
            "description": "AddressPostalCode is the postal code of the customer's address"
          },
          "address_state": {
            "type": "string",
            "description": "AddressState is the state of the customer's address"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "Email is the email of the customer"
          },
          "external_id": {
            "type": "string",
            "description": "ExternalID is the external identifier for the customer"
          },
          "id": {
            "type": "string",
            "description": "ID is the unique identifier for the customer"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata"
          },
          "name": {
            "type": "string",
            "description": "Name is the name of the customer"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.EntitlementResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "feature": {
            "$ref": "#/components/schemas/dto.FeatureResponse"
          },
          "feature_id": {
            "type": "string"
          },
          "feature_type": {
            "$ref": "#/components/schemas/types.FeatureType"
          },
          "id": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "is_soft_limit": {
            "type": "boolean"
          },
          "plan": {
            "$ref": "#/components/schemas/dto.PlanResponse"
          },
          "plan_id": {
            "type": "string"
          },
          "static_value": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "usage_limit": {
            "type": "integer"
          },
          "usage_reset_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          }
        }
      },
      "dto.EnvironmentResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "dto.Event": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string"
          },
          "event_name": {
            "type": "string"
          },
          "external_customer_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": true
          },
          "source": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "dto.FeatureResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lookup_key": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "meter": {
            "$ref": "#/components/schemas/dto.MeterResponse"
          },
          "meter_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "tenant_id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/types.FeatureType"
          },
          "unit_plural": {
            "type": "string"
          },
          "unit_singular": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.GetEventsResponse": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.Event"
            }
          },
          "has_more": {
            "type": "boolean"
          },
          "iter_first_key": {
            "type": "string"
          },
          "iter_last_key": {
            "type": "string"
          }
        }
      },
      "dto.GetPreviewInvoiceRequest": {
        "required": [
          "subscription_id"
        ],
        "type": "object",
        "properties": {
          "period_end": {
            "type": "string"
          },
          "period_start": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          }
        }
      },
      "dto.GetUsageByMeterRequest": {
        "required": [
          "meter_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "customer456"
          },
          "end_time": {
            "type": "string",
            "example": "2024-12-09T00:00:00Z"
          },
          "external_customer_id": {
            "type": "string",
            "example": "user_5"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "meter_id": {
            "type": "string",
            "example": "123"
          },
          "start_time": {
            "type": "string",
            "example": "2024-11-09T00:00:00Z"
          },
          "window_size": {
            "type": "object",
            "example": "HOUR",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.WindowSize"
              }
            ]
          }
        }
      },
      "dto.GetUsageBySubscriptionRequest": {
        "required": [
          "subscription_id"
        ],
        "type": "object",
        "properties": {
          "end_time": {
            "type": "string",
            "example": "2024-03-20T00:00:00Z"
          },
          "lifetime_usage": {
            "type": "boolean",
            "example": false
          },
          "start_time": {
            "type": "string",
            "example": "2024-03-13T00:00:00Z"
          },
          "subscription_id": {
            "type": "string",
            "example": "123"
          }
        }
      },
      "dto.GetUsageBySubscriptionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.SubscriptionUsageByMetersResponse"
            }
          },
          "currency": {
            "type": "string"
          },
          "display_amount": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          }
        }
      },
      "dto.GetUsageRequest": {
        "required": [
          "aggregation_type",
          "event_name"
        ],
        "type": "object",
        "properties": {
          "aggregation_type": {
            "type": "string",
            "example": "COUNT"
          },
          "customer_id": {
            "type": "string",
            "example": "customer456"
          },
          "end_time": {
            "type": "string",
            "example": "2024-03-20T00:00:00Z"
          },
          "event_name": {
            "type": "string",
            "example": "api_request"
          },
          "external_customer_id": {
            "type": "string",
            "example": "customer456"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "property_name": {
            "type": "string",
            "description": "will be empty/ignored in case of COUNT",
            "example": "request_size"
          },
          "start_time": {
            "type": "string",
            "example": "2024-03-13T00:00:00Z"
          },
          "window_size": {
            "type": "object",
            "example": "HOUR",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.WindowSize"
              }
            ]
          }
        }
      },
      "dto.GetUsageResponse": {
        "type": "object",
        "properties": {
          "event_name": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.UsageResult"
            }
          },
          "type": {
            "$ref": "#/components/schemas/types.AggregationType"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "dto.IngestEventRequest": {
        "required": [
          "event_name",
          "external_customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "customer456"
          },
          "event_id": {
            "type": "string",
            "example": "event123"
          },
          "event_name": {
            "type": "string",
            "example": "api_request"
          },
          "external_customer_id": {
            "type": "string",
            "example": "customer456"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Handled separately for dynamic columns",
            "example": {
              "\"response_status\"": "200}",
              "{\"request_size\"": "100"
            }
          },
          "source": {
            "type": "string",
            "example": "api"
          },
          "timestamp": {
            "type": "string",
            "description": "Handled separately due to parsing",
            "example": "2024-03-20T15:04:05Z"
          }
        }
      },
      "dto.InvoiceLineItemResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoice_id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "meter_display_name": {
            "type": "string"
          },
          "meter_id": {
            "type": "string"
          },
          "period_end": {
            "type": "string"
          },
          "period_start": {
            "type": "string"
          },
          "plan_display_name": {
            "type": "string"
          },
          "plan_id": {
            "type": "string"
          },
          "price_id": {
            "type": "string"
          },
          "price_type": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.InvoiceResponse": {
        "type": "object",
        "properties": {
          "amount_due": {
            "type": "number"
          },
          "amount_paid": {
            "type": "number"
          },
          "amount_remaining": {
            "type": "number"
          },
          "billing_period": {
            "type": "string"
          },
          "billing_reason": {
            "type": "string"
          },
          "billing_sequence": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/dto.CustomerResponse"
          },
          "customer_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "finalized_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "invoice_number": {
            "type": "string"
          },
          "invoice_pdf_url": {
            "type": "string"
          },
          "invoice_status": {
            "$ref": "#/components/schemas/types.InvoiceStatus"
          },
          "invoice_type": {
            "$ref": "#/components/schemas/types.InvoiceType"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.InvoiceLineItemResponse"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "paid_at": {
            "type": "string"
          },
          "payment_status": {
            "$ref": "#/components/schemas/types.PaymentStatus"
          },
          "period_end": {
            "type": "string"
          },
          "period_start": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "subscription": {
            "type": "object",
            "description": "Edges",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.SubscriptionResponse"
              }
            ]
          },
          "subscription_id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "voided_at": {
            "type": "string"
          }
        }
      },
      "dto.ListCustomersResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CustomerResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListEntitlementsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.EntitlementResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListEnvironmentsResponse": {
        "type": "object",
        "properties": {
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.EnvironmentResponse"
            }
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "dto.ListFeaturesResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.FeatureResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListInvoicesResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.InvoiceResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListPaymentsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.PaymentResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListPlansResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.PlanResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListPricesResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.PriceResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListSubscriptionsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.SubscriptionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListTasksResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.TaskResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.ListWalletTransactionsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.WalletTransactionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/types.PaginationResponse"
          }
        }
      },
      "dto.LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "minLength": 8,
            "type": "string"
          }
        }
      },
      "dto.MeterResponse": {
        "type": "object",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/meter.Aggregation"
          },
          "created_at": {
            "type": "string",
            "example": "2024-03-20T15:04:05Z"
          },
          "event_name": {
            "type": "string",
            "example": "api_request"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/meter.Filter"
            }
          },
          "id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "example": "API Usage Meter"
          },
          "reset_usage": {
            "$ref": "#/components/schemas/types.ResetUsage"
          },
          "status": {
            "type": "string",
            "example": "published"
          },
          "tenant_id": {
            "type": "string",
            "example": "tenant123"
          },
          "updated_at": {
            "type": "string",
            "example": "2024-03-20T15:04:05Z"
          }
        }
      },
      "dto.PaymentAttemptResponse": {
        "type": "object",
        "properties": {
          "attempt_number": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "payment_id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.PaymentResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.PaymentAttemptResponse"
            }
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "destination_id": {
            "type": "string"
          },
          "destination_type": {
            "$ref": "#/components/schemas/types.PaymentDestinationType"
          },
          "error_message": {
            "type": "string"
          },
          "failed_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "payment_method_id": {
            "type": "string"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/types.PaymentMethodType"
          },
          "payment_status": {
            "$ref": "#/components/schemas/types.PaymentStatus"
          },
          "refunded_at": {
            "type": "string"
          },
          "succeeded_at": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "track_attempts": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.PlanResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.EntitlementResponse"
            }
          },
          "id": {
            "type": "string"
          },
          "invoice_cadence": {
            "$ref": "#/components/schemas/types.InvoiceCadence"
          },
          "lookup_key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.PriceResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "tenant_id": {
            "type": "string"
          },
          "trial_period": {
            "type": "integer"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.PriceResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount stored in main currency units (e.g., dollars, not cents)\nFor USD: 12.50 means $12.50"
          },
          "billing_cadence": {
            "type": "object",
            "description": "BillingCadence is the billing cadence for the price ex RECURRING, ONETIME",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingCadence"
              }
            ]
          },
          "billing_model": {
            "type": "object",
            "description": "BillingModel is the billing model for the price ex FLAT_FEE, PACKAGE, TIERED",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingModel"
              }
            ]
          },
          "billing_period": {
            "type": "object",
            "description": "BillingPeriod is the billing period for the price ex month, year",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingPeriod"
              }
            ]
          },
          "billing_period_count": {
            "type": "integer",
            "description": "BillingPeriodCount is the count of the billing period ex 1, 3, 6, 12"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "description": "Currency 3 digit ISO currency code in lowercase ex usd, eur, gbp"
          },
          "description": {
            "type": "string",
            "description": "Description of the price"
          },
          "display_amount": {
            "type": "string",
            "description": "DisplayAmount is the formatted amount with currency symbol\nFor USD: $12.50"
          },
          "filter_values": {
            "type": "object",
            "description": "FilterValues are the filter values for the price in case of usage based pricing",
            "allOf": [
              {
                "$ref": "#/components/schemas/price.JSONBFilters"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "ID uuid identifier for the price"
          },
          "lookup_key": {
            "type": "string",
            "description": "LookupKey used for looking up the price in the database"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is a jsonb field for additional information",
            "allOf": [
              {
                "$ref": "#/components/schemas/price.JSONBMetadata"
              }
            ]
          },
          "meter": {
            "$ref": "#/components/schemas/dto.MeterResponse"
          },
          "meter_id": {
            "type": "string",
            "description": "MeterID is the id of the meter for usage based pricing"
          },
          "plan_id": {
            "type": "string",
            "description": "PlanID is the id of the plan for plan based pricing"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "tenant_id": {
            "type": "string"
          },
          "tier_mode": {
            "type": "object",
            "description": "Tiered pricing fields when BillingModel is TIERED",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingTier"
              }
            ]
          },
          "tiers": {
            "type": "array",
            "description": "Tiers are the tiers for the price when BillingModel is TIERED",
            "items": {
              "$ref": "#/components/schemas/price.PriceTier"
            }
          },
          "transform_quantity": {
            "type": "object",
            "description": "Transform is the quantity transformation in case of PACKAGE billing model",
            "allOf": [
              {
                "$ref": "#/components/schemas/price.JSONBTransformQuantity"
              }
            ]
          },
          "type": {
            "type": "object",
            "description": "Type is the type of the price ex USAGE, FIXED",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.PriceType"
              }
            ]
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.SignUpRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "minLength": 8,
            "type": "string"
          }
        }
      },
      "dto.SubscriptionResponse": {
        "type": "object",
        "properties": {
          "billing_anchor": {
            "type": "string",
            "description": "BillingAnchor is the reference point that aligns future billing cycle dates.\nIt sets the day of week for week intervals, the day of month for month and year intervals,\nand the month of year for year intervals. The timestamp is in UTC format."
          },
          "billing_cadence": {
            "type": "object",
            "description": "BillingCadence is the cadence of the billing cycle.",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingCadence"
              }
            ]
          },
          "billing_period": {
            "type": "object",
            "description": "BillingPeriod is the period of the billing cycle.",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingPeriod"
              }
            ]
          },
          "billing_period_count": {
            "type": "integer",
            "description": "BillingPeriodCount is the total number units of the billing period."
          },
          "cancel_at": {
            "type": "string",
            "description": "CancelAt is the date the subscription will be canceled"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "description": "CancelAtPeriodEnd is whether the subscription was canceled at the end of the current period"
          },
          "cancelled_at": {
            "type": "string",
            "description": "CanceledAt is the date the subscription was canceled"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "description": "Currency is the currency of the subscription in lowercase 3 digit ISO codes"
          },
          "current_period_end": {
            "type": "string",
            "description": "CurrentPeriodEnd is the end of the current period that the subscription has been invoiced for.\nAt the end of this period, a new invoice will be created."
          },
          "current_period_start": {
            "type": "string",
            "description": "CurrentPeriodStart is the end of the current period that the subscription has been invoiced for.\nAt the end of this period, a new invoice will be created."
          },
          "customer": {
            "$ref": "#/components/schemas/dto.CustomerResponse"
          },
          "customer_id": {
            "type": "string",
            "description": "CustomerID is the identifier for the customer in our system"
          },
          "end_date": {
            "type": "string",
            "description": "EndDate is the end date of the subscription"
          },
          "id": {
            "type": "string",
            "description": "ID is the unique identifier for the subscription"
          },
          "invoice_cadence": {
            "type": "object",
            "description": "InvoiceCadence is the cadence of the invoice. This overrides the plan's invoice cadence.",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.InvoiceCadence"
              }
            ]
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subscription.SubscriptionLineItem"
            }
          },
          "lookup_key": {
            "type": "string",
            "description": "LookupKey is the key used to lookup the subscription in our system"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is a map of key-value pairs that can be attached to the subscription",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.Metadata"
              }
            ]
          },
          "plan": {
            "$ref": "#/components/schemas/dto.PlanResponse"
          },
          "plan_id": {
            "type": "string",
            "description": "PlanID is the identifier for the plan in our system"
          },
          "start_date": {
            "type": "string",
            "description": "StartDate is the start date of the subscription"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "subscription_status": {
            "type": "object",
            "description": "Status is the status of the subscription",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.SubscriptionStatus"
              }
            ]
          },
          "tenant_id": {
            "type": "string"
          },
          "trial_end": {
            "type": "string",
            "description": "TrialEnd is the end date of the trial period"
          },
          "trial_start": {
            "type": "string",
            "description": "TrialStart is the start date of the trial period"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "description": "Version is used for optimistic locking"
          }
        }
      },
      "dto.SubscriptionUsageByMetersResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "display_amount": {
            "type": "string"
          },
          "filter_values": {
            "$ref": "#/components/schemas/price.JSONBFilters"
          },
          "meter_display_name": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/price.Price"
          },
          "quantity": {
            "type": "number"
          }
        }
      },
      "dto.TaskResponse": {
        "type": "object",
        "properties": {
          "completed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "entity_type": {
            "$ref": "#/components/schemas/types.EntityType"
          },
          "error_summary": {
            "type": "string"
          },
          "failed_at": {
            "type": "string"
          },
          "failed_records": {
            "type": "integer"
          },
          "file_name": {
            "type": "string"
          },
          "file_type": {
            "$ref": "#/components/schemas/types.FileType"
          },
          "file_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "processed_records": {
            "type": "integer"
          },
          "started_at": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "successful_records": {
            "type": "integer"
          },
          "task_status": {
            "$ref": "#/components/schemas/types.TaskStatus"
          },
          "task_type": {
            "$ref": "#/components/schemas/types.TaskType"
          },
          "tenant_id": {
            "type": "string"
          },
          "total_records": {
            "type": "integer"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "dto.TenantResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "dto.TopUpWalletRequest": {
        "required": [
          "amount",
          "generate_invoice"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount is the number of credits to add to the wallet"
          },
          "description": {
            "type": "string",
            "description": "Description to add any specific details about the transaction"
          },
          "generate_invoice": {
            "type": "boolean",
            "description": "GenerateInvoice when true, an invoice will be generated for the transaction",
            "default": false
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to add any additional information about the transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.Metadata"
              }
            ]
          },
          "transaction_reason": {
            "type": "object",
            "description": "TransactionReason defines the flow from which the credits are added to the wallet",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.TransactionReason"
              }
            ]
          }
        }
      },
      "dto.UpdateCustomerRequest": {
        "type": "object",
        "properties": {
          "address_city": {
            "maxLength": 100,
            "type": "string"
          },
          "address_country": {
            "type": "string"
          },
          "address_line1": {
            "maxLength": 255,
            "type": "string"
          },
          "address_line2": {
            "maxLength": 255,
            "type": "string"
          },
          "address_postal_code": {
            "maxLength": 20,
            "type": "string"
          },
          "address_state": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "dto.UpdateEntitlementRequest": {
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean"
          },
          "is_soft_limit": {
            "type": "boolean"
          },
          "static_value": {
            "type": "string"
          },
          "usage_limit": {
            "type": "integer"
          },
          "usage_reset_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          }
        }
      },
      "dto.UpdateEnvironmentRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "dto.UpdateFeatureRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "name": {
            "type": "string"
          },
          "unit_plural": {
            "type": "string"
          },
          "unit_singular": {
            "type": "string"
          }
        }
      },
      "dto.UpdateMeterRequest": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/meter.Filter"
            }
          }
        }
      },
      "dto.UpdatePaymentRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "payment_status": {
            "type": "string"
          }
        }
      },
      "dto.UpdatePaymentStatusRequest": {
        "required": [
          "payment_status"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "payment_status": {
            "$ref": "#/components/schemas/types.PaymentStatus"
          }
        }
      },
      "dto.UpdatePlanEntitlementRequest": {
        "required": [
          "feature_id",
          "feature_type"
        ],
        "type": "object",
        "properties": {
          "feature_id": {
            "type": "string"
          },
          "feature_type": {
            "$ref": "#/components/schemas/types.FeatureType"
          },
          "id": {
            "type": "string",
            "description": "The ID of the entitlement to update (present if the entitlement is being updated)"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "is_soft_limit": {
            "type": "boolean"
          },
          "plan_id": {
            "type": "string"
          },
          "static_value": {
            "type": "string"
          },
          "usage_limit": {
            "type": "integer"
          },
          "usage_reset_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          }
        }
      },
      "dto.UpdatePlanPriceRequest": {
        "required": [
          "billing_cadence",
          "billing_model",
          "billing_period",
          "billing_period_count",
          "currency",
          "type"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "billing_cadence": {
            "$ref": "#/components/schemas/types.BillingCadence"
          },
          "billing_model": {
            "$ref": "#/components/schemas/types.BillingModel"
          },
          "billing_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          },
          "billing_period_count": {
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "filter_values": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string",
            "description": "The ID of the price to update (present if the price is being updated)"
          },
          "lookup_key": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "meter_id": {
            "type": "string"
          },
          "plan_id": {
            "type": "string"
          },
          "tier_mode": {
            "$ref": "#/components/schemas/types.BillingTier"
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.CreatePriceTier"
            }
          },
          "transform_quantity": {
            "$ref": "#/components/schemas/price.TransformQuantity"
          },
          "type": {
            "$ref": "#/components/schemas/types.PriceType"
          }
        }
      },
      "dto.UpdatePlanRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.UpdatePlanEntitlementRequest"
            }
          },
          "invoice_cadence": {
            "$ref": "#/components/schemas/types.InvoiceCadence"
          },
          "lookup_key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.UpdatePlanPriceRequest"
            }
          },
          "trial_period": {
            "type": "integer"
          }
        }
      },
      "dto.UpdatePriceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "lookup_key": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "dto.UpdateTaskStatusRequest": {
        "required": [
          "task_status"
        ],
        "type": "object",
        "properties": {
          "task_status": {
            "$ref": "#/components/schemas/types.TaskStatus"
          }
        }
      },
      "dto.UpdateWalletRequest": {
        "type": "object",
        "properties": {
          "auto_topup_amount": {
            "type": "number"
          },
          "auto_topup_min_balance": {
            "type": "number"
          },
          "auto_topup_trigger": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.AutoTopupTrigger"
              }
            ]
          },
          "config": {
            "$ref": "#/components/schemas/types.WalletConfig"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "dto.UsageResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "window_size": {
            "type": "string"
          }
        }
      },
      "dto.UserResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/dto.TenantResponse"
          }
        }
      },
      "dto.WalletBalanceResponse": {
        "type": "object",
        "properties": {
          "auto_topup_amount": {
            "type": "number"
          },
          "auto_topup_min_balance": {
            "type": "number"
          },
          "auto_topup_trigger": {
            "$ref": "#/components/schemas/types.AutoTopupTrigger"
          },
          "balance": {
            "type": "number"
          },
          "balance_updated_at": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/types.WalletConfig"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "credit_balance": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "current_period_usage": {
            "type": "number"
          },
          "customer_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "name": {
            "type": "string"
          },
          "real_time_balance": {
            "type": "number"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "tenant_id": {
            "type": "string"
          },
          "unpaid_invoice_amount": {
            "type": "number"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "wallet_status": {
            "$ref": "#/components/schemas/types.WalletStatus"
          },
          "wallet_type": {
            "$ref": "#/components/schemas/types.WalletType"
          }
        }
      },
      "dto.WalletResponse": {
        "type": "object",
        "properties": {
          "auto_topup_amount": {
            "type": "number"
          },
          "auto_topup_min_balance": {
            "type": "number"
          },
          "auto_topup_trigger": {
            "$ref": "#/components/schemas/types.AutoTopupTrigger"
          },
          "balance": {
            "type": "number"
          },
          "config": {
            "$ref": "#/components/schemas/types.WalletConfig"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "credit_balance": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "wallet_status": {
            "$ref": "#/components/schemas/types.WalletStatus"
          },
          "wallet_type": {
            "$ref": "#/components/schemas/types.WalletType"
          }
        }
      },
      "dto.WalletTransactionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "amount_used": {
            "type": "number"
          },
          "balance_after": {
            "type": "number"
          },
          "balance_before": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "credit_amount": {
            "type": "number"
          },
          "credit_balance_after": {
            "type": "number"
          },
          "credit_balance_before": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "expiry_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.Metadata"
          },
          "reference_id": {
            "type": "string"
          },
          "reference_type": {
            "type": "string"
          },
          "transaction_reason": {
            "$ref": "#/components/schemas/types.TransactionReason"
          },
          "transaction_status": {
            "$ref": "#/components/schemas/types.TransactionStatus"
          },
          "type": {
            "type": "string"
          },
          "wallet_id": {
            "type": "string"
          }
        }
      },
      "gin.H": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "meter.Aggregation": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field is the key in $event.properties on which the aggregation is to be applied\nFor ex if the aggregation type is sum for API usage, the field could be \"duration_ms\""
          },
          "type": {
            "type": "object",
            "description": "Type is the type of aggregation to be applied on the events\nFor ex sum, count, avg, max, min etc",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.AggregationType"
              }
            ]
          }
        }
      },
      "meter.Filter": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key is the key for the filter from $event.properties\nCurrently we support only first level keys in the properties and not nested keys"
          },
          "values": {
            "type": "array",
            "description": "Values are the possible values for the filter to be considered for the meter\nFor ex \"model_name\" could have values \"o1-mini\", \"gpt-4o\" etc",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "price.JSONBFilters": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "price.JSONBMetadata": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "price.JSONBTransformQuantity": {
        "type": "object",
        "properties": {
          "divide_by": {
            "type": "integer",
            "description": "Divide quantity by this number"
          },
          "round": {
            "type": "string",
            "description": "up or down"
          }
        }
      },
      "price.Price": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount stored in main currency units (e.g., dollars, not cents)\nFor USD: 12.50 means $12.50"
          },
          "billing_cadence": {
            "type": "object",
            "description": "BillingCadence is the billing cadence for the price ex RECURRING, ONETIME",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingCadence"
              }
            ]
          },
          "billing_model": {
            "type": "object",
            "description": "BillingModel is the billing model for the price ex FLAT_FEE, PACKAGE, TIERED",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingModel"
              }
            ]
          },
          "billing_period": {
            "type": "object",
            "description": "BillingPeriod is the billing period for the price ex month, year",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingPeriod"
              }
            ]
          },
          "billing_period_count": {
            "type": "integer",
            "description": "BillingPeriodCount is the count of the billing period ex 1, 3, 6, 12"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "description": "Currency 3 digit ISO currency code in lowercase ex usd, eur, gbp"
          },
          "description": {
            "type": "string",
            "description": "Description of the price"
          },
          "display_amount": {
            "type": "string",
            "description": "DisplayAmount is the formatted amount with currency symbol\nFor USD: $12.50"
          },
          "filter_values": {
            "type": "object",
            "description": "FilterValues are the filter values for the price in case of usage based pricing",
            "allOf": [
              {
                "$ref": "#/components/schemas/price.JSONBFilters"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "ID uuid identifier for the price"
          },
          "lookup_key": {
            "type": "string",
            "description": "LookupKey used for looking up the price in the database"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is a jsonb field for additional information",
            "allOf": [
              {
                "$ref": "#/components/schemas/price.JSONBMetadata"
              }
            ]
          },
          "meter_id": {
            "type": "string",
            "description": "MeterID is the id of the meter for usage based pricing"
          },
          "plan_id": {
            "type": "string",
            "description": "PlanID is the id of the plan for plan based pricing"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "tenant_id": {
            "type": "string"
          },
          "tier_mode": {
            "type": "object",
            "description": "Tiered pricing fields when BillingModel is TIERED",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.BillingTier"
              }
            ]
          },
          "tiers": {
            "type": "array",
            "description": "Tiers are the tiers for the price when BillingModel is TIERED",
            "items": {
              "$ref": "#/components/schemas/price.PriceTier"
            }
          },
          "transform_quantity": {
            "type": "object",
            "description": "Transform is the quantity transformation in case of PACKAGE billing model",
            "allOf": [
              {
                "$ref": "#/components/schemas/price.JSONBTransformQuantity"
              }
            ]
          },
          "type": {
            "type": "object",
            "description": "Type is the type of the price ex USAGE, FIXED",
            "allOf": [
              {
                "$ref": "#/components/schemas/types.PriceType"
              }
            ]
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "price.PriceTier": {
        "type": "object",
        "properties": {
          "flat_amount": {
            "type": "number",
            "description": "FlatAmount is the flat amount for the given tier and it is applied\non top of the unit amount*quantity. It solves cases in banking like 2.7% + 5c"
          },
          "unit_amount": {
            "type": "number",
            "description": "UnitAmount is the amount per unit for the given tier"
          },
          "up_to": {
            "type": "integer",
            "description": "Upto is the quantity up to which this tier applies. It is null for the last tier"
          }
        }
      },
      "price.TransformQuantity": {
        "type": "object",
        "properties": {
          "divide_by": {
            "type": "integer",
            "description": "Divide quantity by this number"
          },
          "round": {
            "type": "string",
            "description": "up or down"
          }
        }
      },
      "subscription.SubscriptionLineItem": {
        "type": "object",
        "properties": {
          "billing_period": {
            "$ref": "#/components/schemas/types.BillingPeriod"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "meter_display_name": {
            "type": "string"
          },
          "meter_id": {
            "type": "string"
          },
          "plan_display_name": {
            "type": "string"
          },
          "plan_id": {
            "type": "string"
          },
          "price_id": {
            "type": "string"
          },
          "price_type": {
            "$ref": "#/components/schemas/types.PriceType"
          },
          "quantity": {
            "type": "number"
          },
          "start_date": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/types.Status"
          },
          "subscription_id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      },
      "types.AggregationType": {
        "type": "string",
        "enum": [
          "COUNT",
          "SUM",
          "AVG",
          "COUNT_UNIQUE"
        ],
        "x-enum-varnames": [
          "AggregationCount",
          "AggregationSum",
          "AggregationAvg",
          "AggregationCountUnique"
        ]
      },
      "types.AutoTopupTrigger": {
        "type": "string",
        "enum": [
          "disabled",
          "balance_below_threshold"
        ],
        "x-enum-varnames": [
          "AutoTopupTriggerDisabled",
          "AutoTopupTriggerBalanceBelowThreshold"
        ]
      },
      "types.BillingCadence": {
        "type": "string",
        "enum": [
          "RECURRING",
          "ONETIME"
        ],
        "x-enum-varnames": [
          "BILLING_CADENCE_RECURRING",
          "BILLING_CADENCE_ONETIME"
        ]
      },
      "types.BillingModel": {
        "type": "string",
        "enum": [
          "FLAT_FEE",
          "PACKAGE",
          "TIERED"
        ],
        "x-enum-varnames": [
          "BILLING_MODEL_FLAT_FEE",
          "BILLING_MODEL_PACKAGE",
          "BILLING_MODEL_TIERED"
        ]
      },
      "types.BillingPeriod": {
        "type": "string",
        "enum": [
          "MONTHLY",
          "ANNUAL",
          "WEEKLY",
          "DAILY"
        ],
        "x-enum-varnames": [
          "BILLING_PERIOD_MONTHLY",
          "BILLING_PERIOD_ANNUAL",
          "BILLING_PERIOD_WEEKLY",
          "BILLING_PERIOD_DAILY"
        ]
      },
      "types.BillingTier": {
        "type": "string",
        "enum": [
          "VOLUME",
          "SLAB"
        ],
        "x-enum-varnames": [
          "BILLING_TIER_VOLUME",
          "BILLING_TIER_SLAB"
        ]
      },
      "types.EntityType": {
        "type": "string",
        "enum": [
          "EVENTS",
          "PRICES"
        ],
        "x-enum-varnames": [
          "EntityTypeEvents",
          "EntityTypePrices"
        ]
      },
      "types.FeatureType": {
        "type": "string",
        "enum": [
          "metered",
          "boolean",
          "static"
        ],
        "x-enum-varnames": [
          "FeatureTypeMetered",
          "FeatureTypeBoolean",
          "FeatureTypeStatic"
        ]
      },
      "types.FileType": {
        "type": "string",
        "enum": [
          "CSV",
          "JSON"
        ],
        "x-enum-varnames": [
          "FileTypeCSV",
          "FileTypeJSON"
        ]
      },
      "types.InvoiceBillingReason": {
        "type": "string",
        "enum": [
          "SUBSCRIPTION_CREATE",
          "SUBSCRIPTION_CYCLE",
          "SUBSCRIPTION_UPDATE",
          "MANUAL"
        ],
        "x-enum-varnames": [
          "InvoiceBillingReasonSubscriptionCreate",
          "InvoiceBillingReasonSubscriptionCycle",
          "InvoiceBillingReasonSubscriptionUpdate",
          "InvoiceBillingReasonManual"
        ]
      },
      "types.InvoiceCadence": {
        "type": "string",
        "enum": [
          "ARREAR",
          "ADVANCE"
        ],
        "x-enum-varnames": [
          "InvoiceCadenceArrear",
          "InvoiceCadenceAdvance"
        ]
      },
      "types.InvoiceStatus": {
        "type": "string",
        "enum": [
          "DRAFT",
          "FINALIZED",
          "VOIDED"
        ],
        "x-enum-varnames": [
          "InvoiceStatusDraft",
          "InvoiceStatusFinalized",
          "InvoiceStatusVoided"
        ]
      },
      "types.InvoiceType": {
        "type": "string",
        "enum": [
          "SUBSCRIPTION",
          "ONE_OFF",
          "CREDIT"
        ],
        "x-enum-varnames": [
          "InvoiceTypeSubscription",
          "InvoiceTypeOneOff",
          "InvoiceTypeCredit"
        ]
      },
      "types.Metadata": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "types.PaginationResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "types.PaymentDestinationType": {
        "type": "string",
        "enum": [
          "INVOICE"
        ],
        "x-enum-varnames": [
          "PaymentDestinationTypeInvoice"
        ]
      },
      "types.PaymentMethodType": {
        "type": "string",
        "enum": [
          "CARD",
          "ACH",
          "OFFLINE",
          "CREDITS"
        ],
        "x-enum-varnames": [
          "PaymentMethodTypeCard",
          "PaymentMethodTypeACH",
          "PaymentMethodTypeOffline",
          "PaymentMethodTypeCredits"
        ]
      },
      "types.PaymentStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "PROCESSING",
          "SUCCEEDED",
          "FAILED",
          "REFUNDED",
          "PARTIALLY_REFUNDED"
        ],
        "x-enum-varnames": [
          "PaymentStatusPending",
          "PaymentStatusProcessing",
          "PaymentStatusSucceeded",
          "PaymentStatusFailed",
          "PaymentStatusRefunded",
          "PaymentStatusPartiallyRefunded"
        ]
      },
      "types.PriceType": {
        "type": "string",
        "enum": [
          "USAGE",
          "FIXED"
        ],
        "x-enum-varnames": [
          "PRICE_TYPE_USAGE",
          "PRICE_TYPE_FIXED"
        ]
      },
      "types.ResetUsage": {
        "type": "string",
        "enum": [
          "BILLING_PERIOD",
          "NEVER"
        ],
        "x-enum-varnames": [
          "ResetUsageBillingPeriod",
          "ResetUsageNever"
        ]
      },
      "types.Status": {
        "type": "string",
        "enum": [
          "published",
          "deleted",
          "archived"
        ],
        "x-enum-varnames": [
          "StatusPublished",
          "StatusDeleted",
          "StatusArchived"
        ]
      },
      "types.SubscriptionStatus": {
        "type": "string",
        "enum": [
          "active",
          "paused",
          "cancelled",
          "incomplete",
          "incomplete_expired",
          "past_due",
          "trialing",
          "unpaid"
        ],
        "x-enum-varnames": [
          "SubscriptionStatusActive",
          "SubscriptionStatusPaused",
          "SubscriptionStatusCancelled",
          "SubscriptionStatusIncomplete",
          "SubscriptionStatusIncompleteExpired",
          "SubscriptionStatusPastDue",
          "SubscriptionStatusTrialing",
          "SubscriptionStatusUnpaid"
        ]
      },
      "types.TaskStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "PROCESSING",
          "COMPLETED",
          "FAILED"
        ],
        "x-enum-varnames": [
          "TaskStatusPending",
          "TaskStatusProcessing",
          "TaskStatusCompleted",
          "TaskStatusFailed"
        ]
      },
      "types.TaskType": {
        "type": "string",
        "enum": [
          "IMPORT",
          "EXPORT"
        ],
        "x-enum-varnames": [
          "TaskTypeImport",
          "TaskTypeExport"
        ]
      },
      "types.TransactionReason": {
        "type": "string",
        "enum": [
          "INVOICE_PAYMENT",
          "FREE_CREDIT_GRANT",
          "SUBSCRIPTION_CREDIT_GRANT",
          "PURCHASED_CREDIT_INVOICED",
          "PURCHASED_CREDIT_DIRECT",
          "INVOICE_REFUND",
          "CREDIT_EXPIRED"
        ],
        "x-enum-varnames": [
          "TransactionReasonInvoicePayment",
          "TransactionReasonFreeCredit",
          "TransactionReasonSubscriptionCredit",
          "TransactionReasonPurchasedCreditInvoiced",
          "TransactionReasonPurchasedCreditDirect",
          "TransactionReasonInvoiceRefund",
          "TransactionReasonCreditExpired"
        ]
      },
      "types.TransactionStatus": {
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "failed"
        ],
        "x-enum-varnames": [
          "TransactionStatusPending",
          "TransactionStatusCompleted",
          "TransactionStatusFailed"
        ]
      },
      "types.TransactionType": {
        "type": "string",
        "enum": [
          "credit",
          "debit"
        ],
        "x-enum-varnames": [
          "TransactionTypeCredit",
          "TransactionTypeDebit"
        ]
      },
      "types.WalletConfig": {
        "type": "object",
        "properties": {
          "allowed_price_types": {
            "type": "array",
            "description": "AllowedPriceTypes is a list of price types that are allowed for the wallet\nnil means all price types are allowed",
            "items": {
              "$ref": "#/components/schemas/types.WalletConfigPriceType"
            }
          }
        }
      },
      "types.WalletConfigPriceType": {
        "type": "string",
        "enum": [
          "ALL",
          "USAGE",
          "FIXED"
        ],
        "x-enum-varnames": [
          "WalletConfigPriceTypeAll",
          "WalletConfigPriceTypeUsage",
          "WalletConfigPriceTypeFixed"
        ]
      },
      "types.PlanType": {
        "type": "string",
        "enum": [
          "BASE_PLAN",
          "ADD_ON"
        ],
        "x-enum-varnames": [
          "PlanTypeBasePlan",
          "PlanTypeAddOn"
        ]
      },
      "types.WalletStatus": {
        "type": "string",
        "enum": [
          "active",
          "frozen",
          "closed"
        ],
        "x-enum-varnames": [
          "WalletStatusActive",
          "WalletStatusFrozen",
          "WalletStatusClosed"
        ]
      },
      "types.WalletType": {
        "type": "string",
        "enum": [
          "PROMOTIONAL",
          "PRE_PAID"
        ],
        "x-enum-varnames": [
          "WalletTypePromotional",
          "WalletTypePrePaid"
        ]
      },
      "types.WindowSize": {
        "type": "string",
        "enum": [
          "MINUTE",
          "HOUR",
          "DAY"
        ],
        "x-enum-varnames": [
          "WindowSizeMinute",
          "WindowSizeHour",
          "WindowSizeDay"
        ]
      },
      "v1.ErrorResponse": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "example": "Invalid request payload"
          },
          "error": {
            "type": "string",
            "example": "Invalid request payload"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "description": "Enter your API key in the format *x-api-key &lt;api-key&gt;**",
        "name": "x-api-key",
        "in": "header"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}